/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
//var url = "http://172.16.1.44:49183/";

var url= "http://172.16.1.48:65458/?UDN=uuid:08ab6f54-1050-4dc2-8634-cc1bae2fad34&id=hulu-0df7525e-1c97-41ea-8ced-aba3c351ddd6";

var listController = {
    // This object acts as a controller for the list UI.
    // It implements the dataSource methods for the list.
    
    numberOfRows: function() {
        // The List calls this dataSource method to find out how many rows should be in the list.
        return items.length;
    },
    
    prepareRow: function(rowElement, rowIndex, templateElements) {
        // The List calls this dataSource method for every row.  templateElements contains references to all elements inside the template that have an id. We use it to fill in the text of the rowTitle element.
        if (templateElements.rowTitle) {
            var displayName = items[rowIndex].dctitle.split(".")[0];
            var ext = items[rowIndex].dctitle.split(".")[1];
            templateElements.rowTitle.innerText = displayName;
             if (ext!="jpg") {
                    templateElements.rowArrow.innerHTML
                      
              =  "<img src='video.png' width='50' height='50' ></img>";
             }else {
             templateElements.rowArrow.innerHTML
              = "<img src='"+url+displayName+"-small.png' width='50' height='50' ></img>";
          }
                                
                              
   
        }

        // We also assign an onclick handler that will cause the browser to go to the detail page.
        var self = this;
        var handler = function() {
            var item = items[rowIndex];
            detailController.setitem(item);
            var browser = document.getElementById('browser').object;
            // The Browser's goForward method is used to make the browser push down to a new level.  Going back to previous levels is handled automatically.
            browser.goForward(document.getElementById('detailLevel'), item.dctitle);
        };
        rowElement.onclick = handler;
    }
};

var detailController = {
    // This object acts as a controller for the detail UI.
    
    setitem: function(item) {
        this._item = item;
        this._representedObject = item.dctitle;
        
        // When the item is set, this controller also updates the DOM for the detail page appropriately.  As you customize the design for the detail page, you will want to extend this code to make sure that the correct information is populated into the detail UI.
        var detailTitle = document.getElementById('detailTitle');
        detailTitle.innerHTML = this._item.res;
        var detailLocation = document.getElementById('detailLocation');
        detailLocation.innerHTML = this._item.location;
        var detailDescription = document.getElementById('detailDescription');
   var ext = this._item.dctitle.split(".")[1];
   if (ext!="jpg") {
   //   detailLocation.innerHTML = "<div><embed src="+this._item.res+"  autostart='false' />";  
	detailDescription.innerHTML = "<div><img src='video.png' width='80px' height='80px' />";	
	detailDescription.innerHTML += "<a href="+this._item.res+">"+this._item.res  +"/></div>";

	   
	 
   }else {
      
	detailDescription.innerHTML = "<img src="+url+this._item.name+" width='480px' height='320px' />";
	 }
    }
    
};



//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function backToList() {
 document.getElementById("stackLayout").object.setCurrentView("listLevel", true);
 

}

function load()
{
    dashcode.setupParts();
     var onloadHandler = function() { xmlLoaded(xmlRequest); };
        
           

            // XMLHttpRequest setup code
            var xmlRequest = new XMLHttpRequest();
            xmlRequest.onload = onloadHandler;
            xmlRequest.open("GET", url);
            xmlRequest.setRequestHeader("Cache-Control", "no-cache");
            xmlRequest.send(null);

            function xmlLoaded(xmlRequest) {
                if (xmlRequest.readyState == 4 && xmlRequest.status == 200) {
                    // call the function to handle the response data
                 var result = xmlRequest.responseText.split(":[")[1];
                 result = result.split("]")[0];   
                 result = "[" + result + "]";
					                                                                 
                var  itemobj = eval(result);

                
                items=itemobj;
       
               document.getElementById("list").object.reloadData();

           
       }

};
}

// Sample data.  Some applications may have static data like this, but most will want to use information fetched remotely via XMLHttpRequest.
var items = [
  ];
